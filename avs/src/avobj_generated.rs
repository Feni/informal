// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod avsio {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum AVObjOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct AVObj<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AVObj<'a> {
    type Inner = AVObj<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> AVObj<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        AVObj {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AVObjArgs<'args>) -> flatbuffers::WIPOffset<AVObj<'bldr>> {
      let mut builder = AVObjBuilder::new(_fbb);
      builder.add_value(args.value);
      builder.add_id(args.id);
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_NAME: flatbuffers::VOffsetT = 6;
    pub const VT_VALUE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(AVObj::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AVObj::VT_NAME, None)
  }
  #[inline]
  pub fn value(&self) -> u64 {
    self._tab.get::<u64>(AVObj::VT_VALUE, Some(0)).unwrap()
  }
}

pub struct AVObjArgs<'a> {
    pub id: u64,
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub value: u64,
}
impl<'a> Default for AVObjArgs<'a> {
    #[inline]
    fn default() -> Self {
        AVObjArgs {
            id: 0,
            name: None,
            value: 0,
        }
    }
}
pub struct AVObjBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AVObjBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(AVObj::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AVObj::VT_NAME, name);
  }
  #[inline]
  pub fn add_value(&mut self, value: u64) {
    self.fbb_.push_slot::<u64>(AVObj::VT_VALUE, value, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AVObjBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AVObjBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AVObj<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_avobj<'a>(buf: &'a [u8]) -> AVObj<'a> {
  flatbuffers::get_root::<AVObj<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_avobj<'a>(buf: &'a [u8]) -> AVObj<'a> {
  flatbuffers::get_size_prefixed_root::<AVObj<'a>>(buf)
}

#[inline]
pub fn finish_avobj_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<AVObj<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_avobj_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<AVObj<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Avsio

