/* 
Compiler / Interpreter which consumes the AST generated by parser
and either evaluates or generates bytecode
*/

class Expr {
    constructor(node) {
        // Store context relevant to this expression type
        this.node = node;
    }
    emit_js(target, gen) { 
        // Emits a js version of the expression and return a reference to it
        // target: Backend specific code emitter
        // gen: Language specific code generator
        console.log("Emit JS not implemented for " + this);
    }
    evaluate() { 
        // Evaluates the Expression and returns the result
        console.log("Evaluated not implemented for " + this);
    }
    static parse(node) { 
        // Should parse the relevant bits from the node into a structure
        // Returns Expr node of given type
        console.log("Parse not implemented for " + this)
    }
}

class BinaryExpr extends Expr {
    emit_js(target, gen) {
        let left = this.left.emit_js(target, gen)
        let right = this.right.emit_js(target, gen);
    }
}

class UnaryExpr extends Expr {

}

class LiteralExpr extends Expr {

}

class IdentifierExpr extends Expr {

}

class MapExpr extends Expr {

}

class ArrayExpr extends Expr {

}

class FilteringExpr extends Expr {

}

class InvokeExpr extends Expr {
    // Call/Invoke a "function" ()

}

class ConditionalExpr extends Expr {

}

class LoopExpr extends Expr {

}

class AssignmentExpr extends Expr {

}


class MemberExpr extends Expr {
    // Obj.attr dot access

}

// Grouping?

class CodeGen {}

class JSCodeGen extends CodeGen {
    constructor() {}

}